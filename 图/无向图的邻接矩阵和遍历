#include<string.h>
#include <iostream>
using namespace std;
const int infinity = 0;     //无穷大权值
const int Vertex_Max = 20;      //最大顶点数量
//无向网
class UndirectedNet {
public:
	int vexs[Vertex_Max];//顶点数组
	int edges[Vertex_Max][Vertex_Max]; //邻接矩阵
		int vexnum, edgenum;    //顶点数量和边数；
		//初始化
		UndirectedNet() {
			vexnum = edgenum = 0;
			for (int i = 0; i < Vertex_Max; i++)
			{
				vexs[i] = 0;
				for (int j = 0; j < Vertex_Max; j++)
					edges[i][j] = infinity;
			}
		}
		//输出图的信息
		friend ostream& operator<<(ostream& out, UndirectedNet& G) {
			cout << "顶点数组为：" << endl<<"[";
			for (int i = 0; i < G.vexnum-1; i++) 
				out << G.vexs[i] << ",";
			cout << G.vexs[G.vexnum - 1] << "]" << endl;
			cout << "邻接矩阵为：" << endl ;
			for (int i = 0; i < G.vexnum; i++)
			{
				cout << "\t|  ";
				for (int j = 0; j < G.vexnum-1; j++)
				{
					cout << G.edges[i][j] << ",";
				}
				cout << G.edges[i][G.vexnum - 1] << "  |" << endl;
			}
			return out;
		}
};
//定位顶点下标
 int LocateVex(UndirectedNet G, int T) {
	for (int i = 0; i < G.vexnum; i++)
		if (G.vexs[i] == T)
			return i;
	return -1;
}
//创建无向网
void CreateUDNet(UndirectedNet &G) {
	cout << "请输入无向图的顶点数和边数：" << endl;
	cin >> G.vexnum>>G.edgenum;
	for (int i = 0; i < G.vexnum; i++) {
		cout << "请输入第"<<i+1<<"个顶点的信息：";
		cin >> G.vexs[i];
	}
		int v1, v2, w;
	for (int k = 0; k < G.edgenum; k++) {
		cout << "请输入边的两个顶点和这条边的权值：";
		cin >> v1 >> v2 >> w;
		int i = LocateVex(G, v1);
		int j = LocateVex(G, v2);
		G.edges[i][j] = w;
		G.edges[j][i] = w;
	}
}
//深度优先遍历
void DFS(UndirectedNet G, int v,int* visited) {
	cout << v << "-->";
	int index = LocateVex(G, v);//记录该顶点下标
	visited[index] = 1;
	for (int i = 0; i < G.vexnum; i++)
		if (G.edges[index][i] != infinity && !visited[i])
			DFS(G, G.vexs[i],visited);
	
	/*for (int i = 0; i < G.vexnum; i++)
		cout << visited[i];*/
}
//广度优先遍历
void BFS(UndirectedNet G, int v, int* visited) {
	int index = LocateVex(G, v);//记录该顶点下标
	if (!visited[index])
	{
		cout << v << "-->";
		visited[index] = 1;
	}
	for (int i = 0; i < G.vexnum; i++)
		if (G.edges[index][i] != infinity && !visited[i])
		{
			cout << G.vexs[i] << "-->";
			visited[i] = 1;
		}
 	for (int i = 0; i < G.vexnum; i++)
		if (G.edges[index][i] != infinity)
		{
			for (int j = 0; j < G.vexnum; j++)
			{
				if (G.edges[i][j] != infinity && !visited[j])
					BFS(G, G.vexs[i], visited);
			}
		}
	
}
//测试用
void test(UndirectedNet &G) {
	G.vexnum = 5;
	G.edgenum = 4;
	G.vexs[0] = 7;
	G.vexs[1] = 5;
	G.vexs[2] = 3;
	G.vexs[3] = 2;
	G.vexs[4] = 4;
	G.edges[0][1] = G.edges[1][0] = 1;
	G.edges[0][4] = G.edges[4][0] = 1;
	G.edges[1][2] = G.edges[2][1] = 1;
	G.edges[1][3] = G.edges[3][1] = 1;
	cout << G;
	/*G.vexnum = 8;
	G.edgenum = 9;
	G.vexs[0] = 1;
	G.vexs[1] = 2;
	G.vexs[2] = 3;
	G.vexs[3] = 4;
	G.vexs[4] = 5;
	G.vexs[5] = 6;
	G.vexs[6] = 7;
	G.vexs[7] = 8;
	G.edges[0][1] = G.edges[1][0] = 1;
	G.edges[0][2] = G.edges[2][0] = 1;
	G.edges[1][3] = G.edges[3][1] = 1;
	G.edges[1][4] = G.edges[4][1] = 1;
	G.edges[3][4] = G.edges[4][3] = 1;
	G.edges[6][7] = G.edges[7][6] = 1;
	G.edges[2][5] = G.edges[5][2] = 1;
	G.edges[2][6] = G.edges[6][2] = 1;
	G.edges[5][7] = G.edges[7][5] = 1;*/
}
void main() {
	UndirectedNet G;
	//CreateUDNet(G);
	test(G);
	int* visited = new int[G.vexnum];
	for (int i = 0; i < G.vexnum; i++)
		visited[i] = 0;
	cout << "深度优先：" ; DFS(G, 5, visited); cout << "FINISH" << endl;
	for (int i = 0; i < G.vexnum; i++)
		visited[i] = 0;
	cout << "广度优先："; BFS(G, 5, visited); cout << "FINISH" << endl;

}
